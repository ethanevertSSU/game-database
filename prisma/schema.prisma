generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id
  name           String
  email          String           @unique
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  bio            String?
  accounts       Account[]
  Game           Game[]
  LinkedAccounts LinkedAccounts[]
  sessions       Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accessToken           String?
  accessTokenExpiresAt  DateTime?
  accountId             String
  createdAt             DateTime
  idToken               String?
  password              String?
  providerId            String
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  updatedAt             DateTime
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Game {
  id          String      @id @default(cuid())
  createdAt   DateTime?   @default(now()) @map("created_at")
  gameName    String      @map("game_name")
  Notes       String?     @map("game_notes")
  gamePicture String?     @map("game_picture")
  platform    String      @map("game_platform")
  gameType    String      @map("game_type")
  status      String      @default("Not Started") @map("game_status")
  updatedAt   DateTime?   @updatedAt @map("updated_at")
  userId      String      @map("user_id")
  genres      GameGenre[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("game")
}

model Genre {
  id    String      @id @default(cuid())
  name  String      @unique
  games GameGenre[]

  @@map("genre")
}

model GameGenre {
  id      String @id @default(cuid())
  game    Game   @relation(fields: [gameId], references: [id])
  gameId  String
  genre   Genre  @relation(fields: [genreId], references: [id])
  genreId String

  @@unique([gameId, genreId])
}

model LinkedAccounts {
  id                       String    @id @default(cuid())
  createdAt                DateTime? @default(now()) @map("created_at")
  updatedAt                DateTime? @updatedAt @map("updated_at")
  externalPlatformId       String    @map("external_platform_id")
  externalPlatformUserName String    @map("external_platform_user_name")
  platformName             String    @map("platform_name")
  userId                   String    @map("user_id")
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("linked_accounts")
}
